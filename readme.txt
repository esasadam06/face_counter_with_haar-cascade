OpenCV İle görüntü işleme, yüz tanıma ve webcam ile kişi sayma.
Bu mini projede öncelikle ne kullandım. Yazılım dili olarak Pythonı kullandım. "haarcascade-frontalface-default.xml" dosyasını kullandım. Bu dosya haar cascade yöntemi ile oluşturulmuş bir xml dosyasıdır. Ayrıca OpenCV kütüphanesini kullandım.
OpenCV(Open Source Computer Vision Library) açık kaynak bir görüntü işleme(bilgisayar görüşü) kütüphanesidir. Bu kütüphane gerçek zamanlı olarak object detection(nesne tespiti, bilgisayar görmesi) yapılmasını sağlayan çeşitli fonksiyonlar içermektedir. Bu foksiyonlar özellikle görüntü işlemeye yeni başlayanlara büyük kolaylık sağlayacaktır. Tabii ki kendi eğittiğiniz bir yazılım sizin için daha iyi sonuç verecektir, burada kullandığımız xml dosyası genel amaçlı bir yüz tanıma dosyasıdır. Sizler de kendinizi geliştirerek kendi projenizin amacı doğrultusunda eğitebilirsiniz. Bu yazımda hazır kütüphane ve xml kullanarak yazılım bilgisi olmayan ilgili arkadaşların da bir şeyler yapabileceğini göstermek.
Öncelikle python'ı bilgisayarımıza kurmamız gerekiyor. Bunun için eğer Windows kullanıcısı iseniz https://www.python.org/downloads/adresinden python indirebilirsiniz. 
Linux kullanıcısı iseniz;
-sudo apt-get update
-sudo apt-get install python3.7
Komutları ile python3'ü indirebilirsiniz.
Python'ı indirdikten sonra sırada 2. adım OpenCV kütüphanesini indirmek var. Windows kullanıcı iseniz cmd(komut istemi)'e 
pip install opencv-python komutunu yazmıyoruz.
Eğer Linux kullanıcısı iseniz terminal'e 
sudo apt-get install python-opencv komutunu yazıyoruz.
Son olarak ise OpenCV'nin github hesabından haarcascade_frontalface_default.xml dosyasını bu adresten https://github.com/opencv/opencv/blob/master/data/haarcascades/haarcascade_frontalface_default.xml indiriyoruz ve bu xml dosyasını proje dosyamıza atıyoruz.
 
haarcascade-frontalface-default.xml dosyasını proje dosyamızın içine attıktak sonra kodlamaya başlayabiliriz.
 
Öncelikle OpenCV kütüphanesini projemize import ediyoruz ve artık OpenCV fonksiyonlarını kullanabiliriz. İlk olarak kullanmamız gereken fonksiyon CascadeClassifier fonksiyonu(methodu). Bu method sayesinde haarcascade-frontalface-default.xml dosyasında bulunan sınıflandırmayı kullanmamızı sağlar. Classifier kelimesinin türkçesi de tam olarak sınıflandırıcıdır. Projemizin amacı insan saymak ve webcam karşısında ki insan sayısı en az 0 olabilir. Bu yüzden people diye bir değişkeni 0 yaptık. 
 Yukarıda gördüğümüz fonksiyon tespit işlemini yapan fonksiyon. frame parametsini alıyor. frame'i videoda bulunan her bir an olarak düşünebilirsiniz, yani birer fotoğraf gibi. Şimdi bu method ile tek tek işleyeceğiz. Öncelikle haar cascade yöntemi siyah-beyaz görüntülerde tespit yapabildiği için resmi cvtColor() methodu ile siyah-beyaz'a çevirdik. Bu siyah-beyaz görüntüyü detectMultiScale() methodu ile yüz algılıyoruz. Burada tekrar people değişkenini 0 yapıyoruz, çünkü her frame için 0'dan başlayarak kişi tespit edildikçe arttıracağız. Bir döngü kullanıyoruz tespit edilen yüzlerin üzerinde öncelikle rectangle() methodu ile bir dikdörtgen oluşturuyoruz ve sağ üst tarafına "Detected" yazısı yazdırıyoruz. Hazır bir yüz tespit edilmişken people değişkenini bir arttırıyoruz. Kullanmış olduğumuz for döngüsü sonlandığında frame'de kaç adet yüz varsa o kadar people değişkeni arttırılmış olacağız. Örneğin dört kişi varsa, 0 dört kez arttırılacak ve people değişkeni dört olacak. Döngü bittiğine göre putText() methodu ile artık tespit edilen kişi sayısını ekrana yazdırabiliriz. Artık bu frame ile işimiz bittiğine göre bu frame'i return yapabilir, yani sonuçlandırıp geri gönderebiliriz.
 
Sıra geldi kameramızdan görüntüyü alıp fonksiyonumuzu kullanarak anlık görüntü işleme işlemini yapmaya. Öncelikle VideoCapture() methodu ile kameramızdan görüntüyü alıyoruz. Bu method'a parametre olarak 0 verdim, çünkü bu programı dizüstü bilgisayarımın kamerasını kullandım. Eğer sizin ikinci, üçüncü kameranızı bu parametreyi 0, 1, 2.. gibi parametreler ile kullanabilirsiniz. Öncelikle sonsuz bir döngü oluşturuyoruz. Bu döngünün yapması gereken ilk işlem read() methodu ile görüntüyü parse(parçalara ayırmak) etmek. Bu sayede frame'leri elde edebiliriz. Elde ettiğimiz bu frame'i yazmış olduğumuz detect() methoduna parametre olarak gönderiyoruz ve canvas değişkeninde işlenmiş frame'i elde ediyoruz. Bu canvas'ı(işlenmiş frame) ekrana imshow() method'u ile gösteriyoruz. Kameramızdan gelen video frame'lere ayrılıyor, işleniyor, işlenen frame'ler sayesinde ekranda görüntülüyoruz. Bu sonsuz döngüyü sonlandırmak için de ord() method'unu kullanıyoruz. Döngü bittikten sonra release() methodu ile ram'i temizliyor ve destroyAllWindows() methodu ile açık olan pencereleri sonlandırıyoruz.